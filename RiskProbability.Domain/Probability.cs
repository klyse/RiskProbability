namespace RiskProbability.Domain
{
	public class Probability
	{
		private static readonly double[,] Probabilities =
		{
			{0.41667, 0.75424, 0.91637, 0.97154, 0.99032, 0.99671, 0.99888, 0.99962, 0.99987, 0.99996, 0.99998, 0.99999, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
			{
				0.1061, 0.36265, 0.65595, 0.78545, 0.88979, 0.93398, 0.96665, 0.98031, 0.99011, 0.9942, 0.99709, 0.9983, 0.99915, 0.9995, 0.99975, 0.99985, 0.99993, 0.99996,
				0.99998, 0.99999
			},
			{
				0.02702, 0.20607, 0.47025, 0.64162, 0.76937, 0.85692, 0.90994, 0.9468, 0.96699, 0.9811, 0.98839, 0.99349, 0.99603, 0.99781, 0.99867, 0.99928, 0.99956, 0.99976,
				0.99986, 0.99992
			},
			{
				0.00688, 0.0913, 0.31499, 0.47653, 0.63829, 0.74487, 0.83374, 0.8878, 0.92982, 0.95393, 0.97204, 0.98199, 0.98932, 0.99321, 0.99605, 0.99751, 0.99857, 0.99911,
				0.9995, 0.99969
			},
			{
				0.00175, 0.04913, 0.20594, 0.35861, 0.5062, 0.63772, 0.7364, 0.81841, 0.87294, 0.91628, 0.94304, 0.9637, 0.97581, 0.98498, 0.99015, 0.99401, 0.99612, 0.99768,
				0.99851, 0.99912
			},
			{
				0.00045, 0.02135, 0.1337, 0.2525, 0.39675, 0.52068, 0.64007, 0.72956, 0.80764, 0.86109, 0.90522, 0.93354, 0.95611, 0.96991, 0.98065, 0.98697, 0.9918, 0.99455,
				0.99663, 0.99779
			},
			{
				0.00011, 0.01133, 0.08374, 0.18149, 0.29742, 0.42333, 0.53553, 0.64294, 0.72608, 0.79983, 0.85205, 0.89612, 0.92541, 0.94929, 0.96441, 0.97644, 0.98377, 0.98949,
				0.99287, 0.99547
			},
			{
				3e-05, 0.0049, 0.0535, 0.1234, 0.22405, 0.32948, 0.44558, 0.54736, 0.64641, 0.72397, 0.79412, 0.84486, 0.88857, 0.91838, 0.94318, 0.95933, 0.97242, 0.98063,
				0.98715, 0.99112
			},
			{
				1e-05, 0.00259, 0.03277, 0.08617, 0.16156, 0.25777, 0.35693, 0.46399, 0.55807, 0.65006, 0.72303, 0.78988, 0.83916, 0.88227, 0.91231, 0.93772, 0.95466, 0.96861,
				0.97758, 0.98482
			},
			{
				0.0, 0.00112, 0.02075, 0.05719, 0.11828, 0.19343, 0.28676, 0.37987, 0.47994, 0.56759, 0.65383, 0.72284, 0.78676, 0.83457, 0.87696, 0.90704, 0.93284, 0.95038,
				0.96504, 0.97465
			},
			{
				0.0, 0.00059, 0.01255, 0.03917, 0.08292, 0.14698, 0.22187, 0.31173, 0.39987, 0.49395, 0.57629, 0.65762, 0.72319, 0.78447, 0.83088, 0.87248, 0.90246, 0.92848,
				0.94647, 0.96169
			},
			{
				0.0, 0.00025, 0.00791, 0.02555, 0.05942, 0.10721, 0.17331, 0.24704, 0.33375, 0.41749, 0.5065, 0.5843, 0.6614, 0.72395, 0.78284, 0.8279, 0.86869, 0.89845, 0.92457,
				0.9429
			},
			{
				0.0, 0.00013, 0.00475, 0.01725, 0.04079, 0.07963, 0.13039, 0.19735, 0.26971, 0.35338, 0.43328, 0.51787, 0.59174, 0.66515, 0.72501, 0.78172, 0.82551, 0.86547,
				0.89496, 0.92107
			},
			{
				0.0, 6e-05, 0.00299, 0.01111, 0.02875, 0.05679, 0.09956, 0.15221, 0.21943, 0.29026, 0.3711, 0.44756, 0.52827, 0.59869, 0.66884, 0.72629, 0.78102, 0.82359, 0.86273,
				0.89189
			},
			{
				0.0, 3e-05, 0.00179, 0.00742, 0.01941, 0.04142, 0.07321, 0.11889, 0.17277, 0.2398, 0.30904, 0.38723, 0.46062, 0.53788, 0.60524, 0.67248, 0.72775, 0.78065, 0.82208,
				0.8604
			},
			{
				0.0, 1e-05, 0.00112, 0.00473, 0.01351, 0.02901, 0.05486, 0.08964, 0.13753, 0.19211, 0.25868, 0.32631, 0.40204, 0.47264, 0.54681, 0.61144, 0.67605, 0.72934, 0.78055,
				0.82089
			},
			{
				0.0, 1e-05, 0.00067, 0.00314, 0.009, 0.02085, 0.03958, 0.06871, 0.10589, 0.1554, 0.21034, 0.27624, 0.3423, 0.41572, 0.48379, 0.55516, 0.61732, 0.67956, 0.73103,
				0.78068
			},
			{0.0, 0.0, 0.00042, 0.00198, 0.0062, 0.01438, 0.0292, 0.05081, 0.08273, 0.12182, 0.17252, 0.22755, 0.29265, 0.35717, 0.42844, 0.49419, 0.56302, 0.62293, 0.683, 0.7328},
			{
				0.0, 0.0, 0.00025, 0.00131, 0.00408, 0.01021, 0.02073, 0.03833, 0.06248, 0.09675, 0.13736, 0.1889, 0.24381, 0.30804, 0.37106, 0.44031, 0.50393, 0.57043, 0.62829,
				0.68637
			},
			{
				0.0, 0.0, 0.00016, 0.00082, 0.00279, 0.00696, 0.0151, 0.02788, 0.04803, 0.07441, 0.11066, 0.15246, 0.20457, 0.25922, 0.32251, 0.3841, 0.45145, 0.5131, 0.57746,
				0.63343
			}
		};

		public static double GetProbability(int attacker, int defender)
		{
			attacker = attacker > Probabilities.GetLength(1) ? Probabilities.GetLength(1) : attacker;
			defender = defender > Probabilities.GetLength(0) ? Probabilities.GetLength(0) : defender;

			return Probabilities[defender, attacker];
		}
	}
}